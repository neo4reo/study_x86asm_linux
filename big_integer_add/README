         1         2         3         4         5         6         7
1234567890123456789012345678901234567890123456789012345678901234567890
======================================================================
---------------------------------------------+------------------------
 TITLE: Big integer addition                 |
                                             |    #x86assembly
                                             |    #research
                                             |    #cryptography
AUTHOR: Nik Mohamad Aizuddin bin Nik Azmi    |    #prototype
 EMAIL: nickaizuddin93@gmail.com             |    #algorithm
  DATE: 29-JAN-2015, Thursday                |
---------------------------------------------+------------------------

TARGET
    KERNEL       : Linux x86
    ARCHITECTURE : x86_64
    ASSEMBLER    : NASM

REQUIRED EXTERNAL FILES
    ---

NOTES

    Big integer format:

        The numbering system used in storing big integer is base 10.
        Given,

            p = 104928374593

        Then we will split the number like this:

            p = 01 00 04 09 02 08 03 07 04 05 09 03

        This is how the value is stored in the memory:

            p = 0x03, 0x09, 0x05, 0x04, 0x07, 0x03, 0x08,
                0x02, 0x09, 0x04, 0x00, 0x01


    This is a simple example for big integer addition:

        Given,
            p = 104928374593
            q = 900100005007

        Find the value of z = p + q

        z =       01 00 04 09 02 08 03 07 04 05 09 03
            +                                      07
            +                                   01 ---(carry)
            +                                   00
            +                                01 ------(carry)
            +                                00
            +                             05
            +                          00
            +                       00
            +                    00
            +                 00
            +              01
            +           01 ---------------------------(carry)
            +           00
            +        00
            +     09
            +  01 ------------------------------------(carry)
               ======================================
               01 00 00 05 00 02 08 03 07 09 06 00 00
               ======================================

        z = 1005028379600

----------------------------------------------------------------------

PROCESS DESCRIPTION:

  +----------------------------------------------------------------+
  |                    BSS SEGMENT INFORMATION                     |
  +-------------+---------------+----------------------------------+
  |     Data    |      Size     |           Description            |
  +-------------+---------------+----------------------------------+
  | z           | 32-bit * 8    | Big integer z.                   |
  +-------------+---------------+----------------------------------+

  +----------------------------------------------------------------+
  |                   RODATA SEGMENT INFORMATION                   |
  +------------+------------+---------------+----------------------+
  |    Data    |    Size    |    Value      |      Description     |
  +------------+------------+---------------+----------------------+
  | p          | 32-bit * 8 | 104928374593  | Big int p.           |
  +------------+------------+---------------+----------------------+
  | q          | 32-bit * 8 | 900100005007  | Big int q.           |
  +------------+------------+---------------+----------------------+
  | base       | 32-bit * 1 | 10            | Base number.         |
  +------------+------------+---------------+----------------------+

       begin

  001:     EBX = @z;
  002:     ESI = @p;
  003:     EDI = @q;

           ## Loop for every 32 bits * 8
  004:     ECX = 4 * 8;
           .loop:
  005:         EAX = ESI^ + EDI^;
  006:         EAX = EAX / base;
  007:         EBX^ += EDX;
  008:         ++ EBX;
  009:         ++ ESI;
  010:         ++ EDI;

  011:         -- ECX;
  012:         if ECX != 0, goto .loop;
           .endloop:

       end.

======================================================================
